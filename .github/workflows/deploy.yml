name: Deploy Arbeit Fullstack App on EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:   # allow manual run from GitHub UI

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo
      - name: Checkout Repo
        uses: actions/checkout@v3

      # Step 2: Debug - list files in repo
      - name: List repo files
        run: ls -R

      # Step 3: Copy files to EC2 inside ~/arbeit-deployment
      - name: Copy repo to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu   # or ubuntu if Ubuntu server
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml,Dockerfile.frontend-fixed,Dockerfile.backend-fixed"
          target: /home/ubuntu/arbeit-deployment


      # Step 4: SSH into EC2 and deploy with Docker Compose
      - name: Deploy on EC2 with Docker Compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu    # âœ…Ubuntu user
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          debug: true
          script: |

            cd ~/arbeit-deployment

            # Install Git if missing
            if ! command -v git &> /dev/null; then
            echo "Installing Git..."
            sudo apt-get update -y
            sudo apt-get install -y git
            fi

            # Install Docker and Docker Compose if missing
            if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt-get update -y
            sudo apt-get install -y ca-certificates curl gnupg lsb-release

            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

            echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            sudo apt-get update -y
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

            sudo systemctl enable docker
            sudo systemctl start docker
            fi

            # Verify Docker Compose is available
            if ! docker compose version &> /dev/null; then
              echo "Installing Docker Compose plugin..."
              sudo apt-get update -y
              sudo apt-get install -y docker-compose-plugin
            fi

            echo "Docker version: $(docker --version)"
            echo "Docker Compose version: $(docker compose version)"

            # Configure Docker for public registry access
            echo "Configuring Docker..."

            # Create Docker config directory if it doesn't exist
            sudo mkdir -p /root/.docker

            # Simple Docker deployment with authentication fix
            echo "Starting deployment..."
            set -e  # Exit on any error

            # Show current directory
            echo "Current directory: $(pwd)"
            echo "Directory contents:"
            ls -la

            # Clone the application repository if it doesn't exist
            if [ ! -d "../Arbeit-cicd" ]; then
              echo "Cloning Arbeit-cicd repository..."
              cd ..
              pwd
              ls -la
              git clone https://github.com/PavanKarthikGaraga/Arbeit-cicd.git || {
                echo "ERROR: Failed to clone Arbeit-cicd repository"
                exit 1
              }
              cd arbeit-deployment
              pwd
            else
              echo "Updating Arbeit-cicd repository..."
              cd ../Arbeit-cicd
              pwd
              git pull || echo "Warning: Failed to update repository, continuing..."
              cd ../arbeit-deployment
              pwd
            fi

            # Check if Arbeit-cicd directories exist
            if [ ! -d "../Arbeit-cicd/my-app" ]; then
              echo "ERROR: my-app directory not found in Arbeit-cicd"
              exit 1
            fi

            if [ ! -d "../Arbeit-cicd/springboot-backend" ]; then
              echo "ERROR: springboot-backend directory not found in Arbeit-cicd"
              exit 1
            fi

            # Replace the problematic Dockerfiles with Docker Hub-free versions
            echo "Replacing Dockerfiles to avoid Docker Hub issues..."

            # Fix frontend Dockerfile
            echo "Fixing frontend Dockerfile..."
            if [ -f "../Arbeit-cicd/my-app/Dockerfile" ]; then
              cp Dockerfile.frontend-fixed ../Arbeit-cicd/my-app/Dockerfile.fixed || echo "Warning: Failed to backup frontend Dockerfile"
              mv ../Arbeit-cicd/my-app/Dockerfile ../Arbeit-cicd/my-app/Dockerfile.original || echo "Warning: Failed to move original frontend Dockerfile"
            fi
            cp Dockerfile.frontend-fixed ../Arbeit-cicd/my-app/Dockerfile || {
              echo "ERROR: Failed to copy frontend Dockerfile"
              exit 1
            }

            # Fix backend Dockerfile
            echo "Fixing backend Dockerfile..."
            if [ -f "../Arbeit-cicd/springboot-backend/Dockerfile" ]; then
              cp Dockerfile.backend-fixed ../Arbeit-cicd/springboot-backend/Dockerfile.fixed || echo "Warning: Failed to backup backend Dockerfile"
              mv ../Arbeit-cicd/springboot-backend/Dockerfile ../Arbeit-cicd/springboot-backend/Dockerfile.original || echo "Warning: Failed to move original backend Dockerfile"
            fi
            cp Dockerfile.backend-fixed ../Arbeit-cicd/springboot-backend/Dockerfile || {
              echo "ERROR: Failed to copy backend Dockerfile"
              exit 1
            }

            # Fix Docker Hub authentication issue
            echo "Configuring Docker authentication..."
            sudo docker logout || true

            # Verify docker-compose.yml exists
            if [ ! -f "docker-compose.yml" ]; then
              echo "ERROR: docker-compose.yml not found!"
              exit 1
            fi

            # Stop existing containers
            echo "Stopping existing containers..."
            sudo docker compose down || echo "No existing containers to stop"

            # Clean up and deploy
            echo "Cleaning up Docker system..."
            sudo docker system prune -f || echo "Warning: Failed to prune Docker system"

            echo "Building and starting containers..."
            sudo docker compose up -d --build || {
              echo "ERROR: Failed to build/start containers"
              echo "Checking Docker status..."
              sudo docker compose ps
              sudo docker compose logs
              exit 1
            }

            echo "Deployment completed successfully!"
            echo "Container status:"
            sudo docker compose ps
            echo ""
            echo "Container logs (last 20 lines):"
            sudo docker compose logs --tail=20